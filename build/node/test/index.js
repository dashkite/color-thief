"use strict";

require("source-map-support/register");
var _assert = _interopRequireDefault(require("@dashkite/assert"));
var _amen = require("@dashkite/amen");
var _amenConsole = _interopRequireDefault(require("@dashkite/amen-console"));
var _promises = _interopRequireDefault(require("node:fs/promises"));
var _canvas = require("canvas");
var T = _interopRequireWildcard(require("../src/index.js"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
(async function () {
  (0, _amenConsole.default)(await (0, _amen.test)("Color Thief", [(0, _amen.test)("palette", async function () {
    var canvas, colorArray, image, source;
    canvas = (0, _canvas.createCanvas)();
    image = new _canvas.Image();
    image.src = await _promises.default.readFile("test/sunflower-aaron-burden.jpg");
    source = T.CanvasImage.create({
      canvas,
      image
    });
    colorArray = T.getPalette({
      source,
      colorCount: 5,
      quality: 1
    });
    return _assert.default.deepEqual([181, 196, 221], colorArray[0]);
  })]));
  return process.exit(_amen.success ? 0 : 1);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBQTtBQUNBLElBQUEsT0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQTtBQUNBLElBQUEsS0FBQSxHQUFBLE9BQUE7QUFDQSxJQUFBLFlBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFFQSxJQUFBLFNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUE7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBO0FBQUEsSUFBQSxDQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBO0FBQUEsU0FBQSx5QkFBQSxDQUFBLDZCQUFBLE9BQUEsbUJBQUEsQ0FBQSxPQUFBLE9BQUEsSUFBQSxDQUFBLE9BQUEsT0FBQSxZQUFBLHdCQUFBLFlBQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEtBQUEsQ0FBQTtBQUFBLFNBQUEsd0JBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxVQUFBLFNBQUEsQ0FBQSxlQUFBLENBQUEsdUJBQUEsQ0FBQSx5QkFBQSxDQUFBLFdBQUEsT0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsd0JBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxTQUFBLFVBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLElBQUEsTUFBQSxDQUFBLHdCQUFBLFdBQUEsQ0FBQSxJQUFBLENBQUEsb0JBQUEsQ0FBQSxJQUFBLE1BQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLHdCQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsVUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxJQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxZQUFBLENBQUEsQ0FBQSxPQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQTtBQUFBLFNBQUEsdUJBQUEsR0FBQSxXQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsVUFBQSxHQUFBLEdBQUEsS0FBQSxPQUFBLEVBQUEsR0FBQTtBQUlHLENBQUEsa0JBQUE7RUFFRCxJQUFBLG9CQUFBLEVBQU0sTUFBTSxJQUFBLFVBQUEsRUFBSyxhQUFMLEVBQW9CLENBQzlCLElBQUEsVUFBQSxFQUFLLFNBQUwsRUFBZ0Isa0JBQUE7SUFDcEIsSUFBQSxNQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBO0lBQU0sTUFBQSxHQUFTLElBQUEsb0JBQUEsRUFBQSxDQUFBO0lBQ1QsS0FBQSxHQUFRLElBQUksYUFBSixDQUFBLENBQUE7SUFDUixLQUFLLENBQUMsR0FBTixHQUFZLE1BQU0saUJBQUUsQ0FBQyxRQUFILENBQVksaUNBQWxCLENBQUE7SUFDWixNQUFBLEdBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFkLENBQXFCO01BQUUsTUFBRjtNQUFVO0lBQVYsQ0FBckIsQ0FBQTtJQUVULFVBQUEsR0FBYSxDQUFDLENBQUMsVUFBRixDQUFhO01BQ3hCLE1BRHdCO01BRXhCLFVBQUEsRUFBWSxDQUZZO01BR3hCLE9BQUEsRUFBUztJQUhlLENBQWIsQ0FBQTtXQU1iLGVBQU0sQ0FBQyxTQUFQLENBQWlCLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBQWpCLEVBQW1DLFVBQVUsQ0FBQyxDQUFELENBQTdDLENBQUE7RUFaYyxDQUFoQixDQUQ4QixDQUExQixDQUFOLENBQUE7U0FnQkEsT0FBTyxDQUFDLElBQVIsQ0FBZ0IsYUFBSCxHQUFnQixDQUFoQixHQUF1QixDQUFwQyxDQUFBO0FBbEJDLENBQUEsRUFBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwic291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyXCJcbmltcG9ydCBhc3NlcnQgZnJvbSBcIkBkYXNoa2l0ZS9hc3NlcnRcIlxuaW1wb3J0IHsgdGVzdCwgc3VjY2VzcyB9IGZyb20gXCJAZGFzaGtpdGUvYW1lblwiXG5pbXBvcnQgcHJpbnQgZnJvbSBcIkBkYXNoa2l0ZS9hbWVuLWNvbnNvbGVcIlxuXG5pbXBvcnQgRlMgZnJvbSBcIm5vZGU6ZnMvcHJvbWlzZXNcIlxuaW1wb3J0IHsgY3JlYXRlQ2FudmFzLCBJbWFnZSB9IGZyb20gXCJjYW52YXNcIlxuaW1wb3J0ICogYXMgVCBmcm9tIFwiLi4vc3JjXCJcblxuXG5kbyAtPlxuXG4gIHByaW50IGF3YWl0IHRlc3QgXCJDb2xvciBUaGllZlwiLCBbXG4gICAgdGVzdCBcInBhbGV0dGVcIiwgLT5cbiAgICAgIGNhbnZhcyA9IGNyZWF0ZUNhbnZhcygpXG4gICAgICBpbWFnZSA9IG5ldyBJbWFnZSgpXG4gICAgICBpbWFnZS5zcmMgPSBhd2FpdCBGUy5yZWFkRmlsZSBcInRlc3Qvc3VuZmxvd2VyLWFhcm9uLWJ1cmRlbi5qcGdcIlxuICAgICAgc291cmNlID0gVC5DYW52YXNJbWFnZS5jcmVhdGUgeyBjYW52YXMsIGltYWdlIH1cblxuICAgICAgY29sb3JBcnJheSA9IFQuZ2V0UGFsZXR0ZSB7IFxuICAgICAgICBzb3VyY2UsIFxuICAgICAgICBjb2xvckNvdW50OiA1XG4gICAgICAgIHF1YWxpdHk6IDFcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0LmRlZXBFcXVhbCBbMTgxLCAxOTYsIDIyMSBdLCBjb2xvckFycmF5WzBdXG4gIF1cblxuICBwcm9jZXNzLmV4aXQgaWYgc3VjY2VzcyB0aGVuIDAgZWxzZSAxXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=test/index.coffee